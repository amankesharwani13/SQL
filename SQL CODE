CREATE DATABASE college;
USE college;
-- CREATE DATABASE IF NOT EXISTS college;

-- DROP DATABASE IF EXISTS company;



 -- CREATE TABLE student (         
--  	id INT PRIMARY KEY,
--      name VARCHAR(50),
-- 	 age INT NOT NULL
--  );

-- DROP TABLE student;
-- INSERT INTO student VALUES(1,"AMAN",22);
-- INSERT INTO student VALUES(2,"KESHARWANI",22);

-- SELECT * FROM student;

-- SHOW DATABASES;
-- SHOW TABLES;




CREATE TABLE student(
	rollno INT PRIMARY KEY,
    name VARCHAR(50)
);

INSERT INTO student
(rollno, name)
VALUES
(101, "Karan"),
(102, "Arjun"),
(103, "Aman");

INSERT INTO student VALUES (104, "Ram");

SELECT * FROM student;

CREATE TABLE temp(
	id INT UNIQUE
);

INSERT INTO temp VALUES(101);
INSERT INTO temp VALUES(101);
SELECT * FROM temp;

CREATE TABLE temp1(
	id INT,
    name VARCHAR(50),
    address VARCHAR(30),
    PRIMARY KEY( id, name)
);

CREATE TABLE emp(
	id INT,
    salary INT DEFAULT 25000
);

INSERT INTO emp (id) VALUES(101);
SELECT * FROM emp;


-- Select
CREATE TABLE students(
	rollno INT PRIMARY KEY,
    name VARCHAR(50),
    marks INT NOT NULL,
    grade VARCHAR(1),
    city VARCHAR(20)
);

INSERT INTO students
(rollno, name, marks, grade, city)
VALUES
(101, "Aman", 99, "A", "Mirzapur"),
(102, "Anil", 94, "A", "Manipur"),
(103, "Anmol", 39, "A", "Mohanpur"),
(104, "Amir", 96, "A", "Monipur"),
(105, "Akash", 89, "A", "Mahalpur"),
(106, "Anamika", 59, "A", "Mirzanagar");

SELECT city, count(marks) FROM students GROUP BY city HAVING max(marks) > 90; -- Having Clause is used here
SELECT city 
FROM students 
WHERE grade = 'A' 
GROUP BY city 
HAVING max(marks) > 90 
ORDER BY city;
SELECT name, marks FROM students;
SELECT DISTINCT grade FROM students;
SELECT * FROM students;
SELECT marks, name FROM students WHERE marks > 90;
SELECT * FROM students where marks > 80 AND city = "Mirzapur";
SELECT * FROM students WHERE marks BETWEEN 80 AND 90;
SELECT * FROM students WHERE city IN ("Mirzapur", "Bhopal");
SELECT * FROM students WHERE city NOT IN ("Mirzapur", "Bhopal");
SELECT *  FROM students LIMIT 4;
SELECT * FROM students ORDER BY rollno DESC;

-- to safe mode off
SET SQL_SAFE_UPDATES = 0;
-- Update
UPDATE students SET grade = "O" WHERE grade = "A";
UPDATE students SET grade = "A" WHERE rollno = 102;
UPDATE students SET grade = "B" WHERE rollno = 105;
UPDATE students SET marks = marks + 1;

-- Delete
DELETE FROM students WHERE marks <= 40;

-- Aggregate Function
SELECT max(marks) FROM students;
SELECT avg(marks) FROM students;
SELECT count(marks) FROM students;
SELECT sum(marks) FROM students;

-- group by
SELECT grade, count(name) FROM students GROUP BY grade;
SELECT city, avg(marks) FROM students GROUP BY city ORDER BY avg(marks) DESC;

-- PRACTICE
CREATE TABLE payment(
	customer_id INT PRIMARY KEY,
    customer VARCHAR(50),
    mode VARCHAR(50),
    city VARCHAR(50)
);

INSERT INTO payment
(customer_id, customer, mode, city)
VALUES
(101, 'Olivia Barrett', 'Netbanking', 'Portland'),
(102, 'Ethan Sinclair', 'Credit Card', 'Miami'),
(103, 'Maya Hernandez', 'Credit Card', 'Seattle'),
(104, 'Liam Donovan', 'Netbanking', 'Denver'),
(105, 'Sophia Nguyen', 'Credit Card', 'New Orleans'),
(106, 'Caleb Foster', 'Debit Card', 'Minneapolis'),
(107, 'Ava Patel', 'Debit Card', 'Phoenix'),
(108, 'Lucas Carter', 'Netbanking', 'Bosten'),
(109, 'Isabella Martinez', 'Netbanking', 'Nashville'),
(110, 'Jackson Brooks', 'Credit Card', 'Boston');

SELECT * FROM payment;
SELECT mode, count(customer) FROM payment GROUP BY mode ORDER BY count(mode);

-- WHERE is used to apply conditions on row
-- HAVING CLAUSE is used to apply conditions after grouping


-- Forign Key
CREATE TABLE dept(
	id INT PRIMARY KEY,
    name VARCHAR(50)
);
INSERT INTO dept VALUES 
(101, "ENGLISH"),
(102, "SCIENCE"),
(103, "MATHS");

SELECT * FROM dept;

CREATE TABLE teacher(
	id INT PRIMARY KEY,
    name VARCHAR(50),
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES dept(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

INSERT INTO teacher VALUES
(101, "Adam", 101),
(102, "Adam Singh", 102),
(103, "Bel", 103);

SELECT  * FROM teacher;

UPDATE dept SET id = 110 WHERE id = 103;

-- alter
SELECT * FROM students;

ALTER TABLE students ADD COLUMN age INT;   -- TO ADD a colums in table
ALTER TABLE students DROP COLUMN age;      -- to drop a columns in table
ALTER TABLE students RENAME TO children;   -- to rename the table
SELECT * FROM children;
ALTER TABLE children CHANGE COLUMN city place VARCHAR(50);    -- TO change the name of column
ALTER TABLE children MODIFY rollno FLOAT;         -- TO change the datatype of column
TRUNCATE TABLE children;          -- to delete the data, not the table





-- practice
SELECT * FROM children;
ALTER TABLE children CHANGE COLUMN name full_name VARCHAR(50);
DELETE FROM children WHERE marks < 75;
ALTER TABLE children DROP COLUMN grade;


-- joins
-- INNER JOIN
CREATE TABLE student_table(
	id INT PRIMARY KEY,
    name VARCHAR(50)
);
CREATE TABLE course(
	id INT PRIMARY KEY,
    course VARCHAR(50)
);
INSERT INTO student_table VALUES
(101, "adam"),
(102, "bob"),
(103, "casey");

INSERT INTO course VALUES
(102, "english"),
(105, "math"),
(103, "science"),
(107, "computer science");

SELECT * FROM student_table as s INNER JOIN course as c ON s.id = c.id;
SELECT * FROM student_table LEFT JOIN course ON student_table.id = course.id;
SELECT * FROM student_table RIGHT JOIN course ON student_table.id = course.id;
-- Full join
SELECT * FROM student_table LEFT JOIN course ON student_table.id = course.id
UNION
SELECT * FROM student_table RIGHT JOIN course ON student_table.id = course.id;

-- LEFT EXCLUSIVE JOIN
SELECT * FROM student_table LEFT JOIN course ON student_table.id = course.id WHERE course.id IS NULL;
-- RIGHT EXCLUSIVE JOIN
SELECT * FROM student_table RIGHT JOIN course ON student_table.id = course.id WHERE student_table.id IS NULL;
-- FULL EXCLUSIVE JOIN
SELECT * FROM student_table LEFT JOIN course ON student_table.id = course.id WHERE course.id IS NULL
UNION
SELECT * FROM student_table RIGHT JOIN course ON student_table.id = course.id WHERE student_table.id IS NULL;

-- Self Join
CREATE TABLE Employee(
	id INT,
    name VARCHAR(50),
    manager_id INT
);

INSERT INTO Employee VALUES 
(101, "adam", 103),
(102, "bob", 104),
(103, "casey", NULL),
(104, "donald", 103);

SELECT a.name as manager_name, b.name 
FROM 
Employee as a 
JOIN Employee as b 
ON a.id = b.manager_id;

-- UNION ALL  include duplicate element also
SELECT name FROM Employee
UNION ALL
SELECT name FROM Employee;

-- SQL Sub QUERIES
CREATE TABLE STUDENT_(
	ROLLNO INT PRIMARY KEY,
    NAME VARCHAR(50),
    MARKS INT
);
INSERT INTO STUDENT_ VALUES
(101, "ANIL", 78),
(102, "AMAN", 68),
(103, "AKABAR", 38),
(104, "ANMOL", 78),
(105, "ANAAL", 98),
(106, "AKORL", 88);

SELECT NAME, MARKS FROM STUDENT_ WHERE MARKS > (SELECT avg(MARKS) FROM STUDENT_);
SELECT NAME FROM STUDENT_ WHERE ROLLNO IN (SELECT ROLLNO FROM STUDENT_ WHERE ROLLNO % 2 =0);

-- VIEWS (TEMPORARY TABLE)
CREATE VIEW view1 AS
SELECT rollno, name, marks FROM STUDENT_; 

SELECT * FROM view1;
